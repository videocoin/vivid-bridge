// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vividguardian/gossip/v1/gossip.proto

package gossipv1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GossipMessage struct {
	// Types that are valid to be assigned to Message:
	//
	//	*GossipMessage_SignedHeartbeat
	//	*GossipMessage_SignesEventWithQuorum
	Message isGossipMessage_Message `protobuf_oneof:"message"`
}

func (m *GossipMessage) Reset()         { *m = GossipMessage{} }
func (m *GossipMessage) String() string { return proto.CompactTextString(m) }
func (*GossipMessage) ProtoMessage()    {}
func (*GossipMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a61d649f43e683e, []int{0}
}
func (m *GossipMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GossipMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GossipMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GossipMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipMessage.Merge(m, src)
}
func (m *GossipMessage) XXX_Size() int {
	return m.Size()
}
func (m *GossipMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GossipMessage proto.InternalMessageInfo

type isGossipMessage_Message interface {
	isGossipMessage_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GossipMessage_SignedHeartbeat struct {
	SignedHeartbeat *SignedHeartbeat `protobuf:"bytes,1,opt,name=signed_heartbeat,json=signedHeartbeat,proto3,oneof" json:"signed_heartbeat,omitempty"`
}
type GossipMessage_SignesEventWithQuorum struct {
	SignesEventWithQuorum *SignedEventWithQuorum `protobuf:"bytes,2,opt,name=signes_event_with_quorum,json=signesEventWithQuorum,proto3,oneof" json:"signes_event_with_quorum,omitempty"`
}

func (*GossipMessage_SignedHeartbeat) isGossipMessage_Message()       {}
func (*GossipMessage_SignesEventWithQuorum) isGossipMessage_Message() {}

func (m *GossipMessage) GetMessage() isGossipMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *GossipMessage) GetSignedHeartbeat() *SignedHeartbeat {
	if x, ok := m.GetMessage().(*GossipMessage_SignedHeartbeat); ok {
		return x.SignedHeartbeat
	}
	return nil
}

func (m *GossipMessage) GetSignesEventWithQuorum() *SignedEventWithQuorum {
	if x, ok := m.GetMessage().(*GossipMessage_SignesEventWithQuorum); ok {
		return x.SignesEventWithQuorum
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GossipMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GossipMessage_SignedHeartbeat)(nil),
		(*GossipMessage_SignesEventWithQuorum)(nil),
	}
}

type SignedHeartbeat struct {
	Heartbeat    []byte `protobuf:"bytes,1,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	Signature    []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	GuardianAddr []byte `protobuf:"bytes,3,opt,name=guardian_addr,json=guardianAddr,proto3" json:"guardian_addr,omitempty"`
}

func (m *SignedHeartbeat) Reset()         { *m = SignedHeartbeat{} }
func (m *SignedHeartbeat) String() string { return proto.CompactTextString(m) }
func (*SignedHeartbeat) ProtoMessage()    {}
func (*SignedHeartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a61d649f43e683e, []int{1}
}
func (m *SignedHeartbeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedHeartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedHeartbeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedHeartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedHeartbeat.Merge(m, src)
}
func (m *SignedHeartbeat) XXX_Size() int {
	return m.Size()
}
func (m *SignedHeartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedHeartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_SignedHeartbeat proto.InternalMessageInfo

func (m *SignedHeartbeat) GetHeartbeat() []byte {
	if m != nil {
		return m.Heartbeat
	}
	return nil
}

func (m *SignedHeartbeat) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedHeartbeat) GetGuardianAddr() []byte {
	if m != nil {
		return m.GuardianAddr
	}
	return nil
}

type SignedEventWithQuorum struct {
	Event []byte `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *SignedEventWithQuorum) Reset()         { *m = SignedEventWithQuorum{} }
func (m *SignedEventWithQuorum) String() string { return proto.CompactTextString(m) }
func (*SignedEventWithQuorum) ProtoMessage()    {}
func (*SignedEventWithQuorum) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a61d649f43e683e, []int{2}
}
func (m *SignedEventWithQuorum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedEventWithQuorum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedEventWithQuorum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedEventWithQuorum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedEventWithQuorum.Merge(m, src)
}
func (m *SignedEventWithQuorum) XXX_Size() int {
	return m.Size()
}
func (m *SignedEventWithQuorum) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedEventWithQuorum.DiscardUnknown(m)
}

var xxx_messageInfo_SignedEventWithQuorum proto.InternalMessageInfo

func (m *SignedEventWithQuorum) GetEvent() []byte {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*GossipMessage)(nil), "gossip.v1.GossipMessage")
	proto.RegisterType((*SignedHeartbeat)(nil), "gossip.v1.SignedHeartbeat")
	proto.RegisterType((*SignedEventWithQuorum)(nil), "gossip.v1.SignedEventWithQuorum")
}

func init() {
	proto.RegisterFile("vividguardian/gossip/v1/gossip.proto", fileDescriptor_5a61d649f43e683e)
}

var fileDescriptor_5a61d649f43e683e = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0xcb, 0x2c, 0xcb,
	0x4c, 0x49, 0x2f, 0x4d, 0x2c, 0x4a, 0xc9, 0x4c, 0xcc, 0xd3, 0x4f, 0xcf, 0x2f, 0x2e, 0xce, 0x2c,
	0xd0, 0x2f, 0x33, 0x84, 0xb2, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0xa1, 0xbc, 0x32,
	0x43, 0xa5, 0x03, 0x8c, 0x5c, 0xbc, 0xee, 0x60, 0x9e, 0x6f, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0xaa,
	0x90, 0x3b, 0x97, 0x40, 0x71, 0x66, 0x7a, 0x5e, 0x6a, 0x4a, 0x7c, 0x46, 0x6a, 0x62, 0x51, 0x49,
	0x52, 0x6a, 0x62, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x94, 0x1e, 0x5c, 0x9f, 0x5e,
	0x30, 0x58, 0x89, 0x07, 0x4c, 0x85, 0x07, 0x43, 0x10, 0x7f, 0x31, 0xaa, 0x90, 0x50, 0x34, 0x97,
	0x04, 0x58, 0xa8, 0x38, 0x3e, 0xb5, 0x2c, 0x35, 0xaf, 0x24, 0xbe, 0x3c, 0xb3, 0x24, 0x23, 0xbe,
	0xb0, 0x34, 0xbf, 0xa8, 0x34, 0x57, 0x82, 0x09, 0x6c, 0xa0, 0x02, 0x86, 0x81, 0xae, 0x20, 0x95,
	0xe1, 0x99, 0x25, 0x19, 0x81, 0x60, 0x75, 0x1e, 0x0c, 0x41, 0xa2, 0x10, 0x33, 0xd0, 0x24, 0x9c,
	0x38, 0xb9, 0xd8, 0x73, 0x21, 0x0e, 0x56, 0x2a, 0xe2, 0xe2, 0x47, 0x73, 0x8d, 0x90, 0x0c, 0x17,
	0x27, 0xaa, 0xe3, 0x79, 0x82, 0x10, 0x02, 0x20, 0x59, 0x90, 0xa1, 0x89, 0x25, 0xa5, 0x45, 0xa9,
	0x60, 0x97, 0xf0, 0x04, 0x21, 0x04, 0x84, 0x94, 0xb9, 0x78, 0x61, 0xe1, 0x17, 0x9f, 0x98, 0x92,
	0x52, 0x24, 0xc1, 0x0c, 0x56, 0xc1, 0x03, 0x13, 0x74, 0x4c, 0x49, 0x29, 0x52, 0xd2, 0xe5, 0x12,
	0xc5, 0xea, 0x60, 0x21, 0x11, 0x2e, 0x56, 0xb0, 0x6f, 0xa1, 0xb6, 0x42, 0x38, 0x4e, 0x2e, 0x27,
	0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c,
	0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x05, 0x8e, 0x30, 0xdd, 0xa4, 0xa2,
	0xcc, 0x94, 0xf4, 0x54, 0xfd, 0x82, 0xec, 0x74, 0x7d, 0x70, 0x14, 0x21, 0xc5, 0x9c, 0x35, 0x84,
	0x59, 0x66, 0x98, 0xc4, 0x06, 0x96, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x81, 0x75, 0x8d,
	0xcb, 0xe5, 0x01, 0x00, 0x00,
}

func (m *GossipMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GossipMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GossipMessage_SignedHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipMessage_SignedHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignedHeartbeat != nil {
		{
			size, err := m.SignedHeartbeat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GossipMessage_SignesEventWithQuorum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GossipMessage_SignesEventWithQuorum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SignesEventWithQuorum != nil {
		{
			size, err := m.SignesEventWithQuorum.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGossip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SignedHeartbeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedHeartbeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedHeartbeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuardianAddr) > 0 {
		i -= len(m.GuardianAddr)
		copy(dAtA[i:], m.GuardianAddr)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.GuardianAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Heartbeat) > 0 {
		i -= len(m.Heartbeat)
		copy(dAtA[i:], m.Heartbeat)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.Heartbeat)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedEventWithQuorum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedEventWithQuorum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedEventWithQuorum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Event) > 0 {
		i -= len(m.Event)
		copy(dAtA[i:], m.Event)
		i = encodeVarintGossip(dAtA, i, uint64(len(m.Event)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGossip(dAtA []byte, offset int, v uint64) int {
	offset -= sovGossip(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GossipMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *GossipMessage_SignedHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignedHeartbeat != nil {
		l = m.SignedHeartbeat.Size()
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}
func (m *GossipMessage_SignesEventWithQuorum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignesEventWithQuorum != nil {
		l = m.SignesEventWithQuorum.Size()
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}
func (m *SignedHeartbeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Heartbeat)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	l = len(m.GuardianAddr)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}

func (m *SignedEventWithQuorum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovGossip(uint64(l))
	}
	return n
}

func sovGossip(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGossip(x uint64) (n int) {
	return sovGossip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GossipMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GossipMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GossipMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedHeartbeat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignedHeartbeat{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &GossipMessage_SignedHeartbeat{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignesEventWithQuorum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignedEventWithQuorum{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &GossipMessage_SignesEventWithQuorum{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedHeartbeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedHeartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedHeartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heartbeat = append(m.Heartbeat[:0], dAtA[iNdEx:postIndex]...)
			if m.Heartbeat == nil {
				m.Heartbeat = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardianAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardianAddr = append(m.GuardianAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.GuardianAddr == nil {
				m.GuardianAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedEventWithQuorum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedEventWithQuorum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedEventWithQuorum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGossip
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGossip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = append(m.Event[:0], dAtA[iNdEx:postIndex]...)
			if m.Event == nil {
				m.Event = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGossip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGossip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGossip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGossip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGossip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGossip
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGossip
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGossip
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGossip        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGossip          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGossip = fmt.Errorf("proto: unexpected end of group")
)
